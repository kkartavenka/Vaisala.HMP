@page "/"
@using Classes
@using Vaisala.HMP.Models
@using System.Threading
@inject VaisalaControl VaisalaConnector;

<Row>
    <Column ColumnSize="ColumnSize.Is6">
        <Row>
            <Field Horizontal="true">
                <FieldLabel>Port</FieldLabel>
                <FieldBody>
                    <Select disabled="@(_connected)" @bind-SelectedValue="@VaisalaConnector.Port" TValue="string" style="min-width:10em;">
                        <SelectItem Value="@string.Empty"></SelectItem>
                        @foreach (string port in VaisalaConnector.AvailableSerialPorts) {
                            <SelectItem Value="@port">@port</SelectItem>
                        }
                    </Select>
                </FieldBody>
            </Field>
        </Row>

        <Row>
            <Field Horizontal="true">
                <FieldLabel>Device Id</FieldLabel>
                <FieldBody>
                    <NumericEdit disabled="@(_connected)" @bind-Value="DeviceId" TValue="int?" Min="0" Max="byte.MaxValue" />
                </FieldBody>
            </Field>
        </Row>

        <Row>
            <Field Horizontal="true">
                <FieldLabel>Aggregate time, s</FieldLabel>
                <FieldBody>
                    <NumericEdit disabled="@(_connected)" @bind-Value="AggregateFrequency" TValue="int?" Min="1" Max="int.MaxValue" />
                </FieldBody>
            </Field>
        </Row>

        <Row>
            <Field Horizontal="true">
                <FieldLabel>Base filename</FieldLabel>
                <FieldBody>
                    <TextEdit disabled="@(_connected)" Placeholder="@VaisalaConnector.BaseFileName" @bind-Text="@VaisalaConnector.BaseFileName" />
                </FieldBody>
            </Field>
        </Row>

        <Button Color="Color.Light" Clicked="@(() => VaisalaConnector.GetSerialPortList())">Refresh</Button>
        <Button Color="@_connectButtonColour" Clicked="@(async () => await TryConnect())">@_connectButtonText</Button>
        <Button Color="@_recordButtonColour" Clicked="@(() => StartRecording())">@_recordButtonText</Button>

    </Column>
    <Column ColumnSize="ColumnSize.Is6">
        @foreach (DeviceIdentificationModel info in VaisalaConnector.DeviceIdentification) {
            <Row>@($"{info.ObjectName} - {info.Value}")</Row>
        }

    </Column>
</Row>


<SnackbarStack @ref="snackbarStack" Location="SnackbarStackLocation.Right" />

@code {

    bool _connected = false;

    Color _connectButtonColour = Color.Light;
    string _connectButtonText = "TryConnect";

    Color _recordButtonColour = Color.Light;
    string _recordButtonText = "Start";

    SnackbarStack snackbarStack;
    string _selectedSerialPort;
    Thread _notifications;

    private byte _deviceId;
    private int _aggFrequency;

    int? AggregateFrequency {
        get => _aggFrequency;
        set {
            if (value > 1 && value < int.MaxValue) {
                _aggFrequency = (int)value;
                VaisalaConnector.AggregateTime = _aggFrequency;
            }
            else if (value < 1)
                _aggFrequency = 1;
            else if (value > int.MaxValue)
                _aggFrequency = int.MaxValue;
        }
    }

    int? DeviceId {
        get => _deviceId;
        set {
            if (value >= 0 && value <= byte.MaxValue) {
                _deviceId = (byte)value;
                VaisalaConnector.DeviceId = _deviceId;
            }
            else if (value < 0)
                _deviceId = byte.MinValue;
            else if (value > 0)
                _deviceId = byte.MaxValue;
        }
    }

    void NotificationThread() {
        while (true) {
            List<string> exceptions = VaisalaConnector.PullExceptions();
            foreach (string item in exceptions) {
                Task.Run(async () => await snackbarStack.PushAsync(item, SnackbarColor.Info)).Wait();
                InvokeAsync(() => StateHasChanged());
                Thread.Sleep(500);
            }

            Thread.Sleep(1000);
        }
    }

    void StartRecording() {
        if (!VaisalaConnector.Active) {
            VaisalaConnector.StartRecording();
            _recordButtonColour = Color.Danger;
            _recordButtonText = "Stop";
        } else {
            VaisalaConnector.StopRecording();
            _recordButtonColour = Color.Light;
            _recordButtonText = "Start";
        }
    }

    async Task TryConnect() {
        if (VaisalaConnector.Connected() == false)
            await VaisalaConnector.TryConnect();
        else
            VaisalaConnector.TryDisconnect();

        if (VaisalaConnector.Connected()) {
            _connected = true;
            _connectButtonColour = Color.Danger;
            _connectButtonText = "Disconnect";
        }
        else {
            _connected = false;
            _connectButtonColour = Color.Light;
            _connectButtonText = "Try Connect";
        }
    }

    protected override Task OnInitializedAsync() {
        _connected = VaisalaConnector.Connected();
        _notifications = new Thread(new ThreadStart(NotificationThread));
        _notifications.Start();

        VaisalaConnector.Initialize();

        _deviceId = VaisalaConnector.DeviceId;
        _aggFrequency = VaisalaConnector.AggregateTime;

        return base.OnInitializedAsync();
    }
}